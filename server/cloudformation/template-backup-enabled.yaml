---
Resources:
  GameBackupBucket:
    Condition: createBucket
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join
        - ''
        - - !Ref BucketName
          - '-'
          - !Ref AWS::AccountId
          - '-'
          - !Ref AWS::Region
      Tags:
        - Key: aws-cdk:auto-delete-objects
          Value: 'true'
    UpdateReplacePolicy: Delete
    DeletionPolicy: Retain
  GameServerVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - 'palworld-cdk-demo'
              - '-'
              - !Ref AWS::Region
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: CodeStack/Vpc/publicSubnet1
      VpcId:
        Ref: GameServerVPC
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: CodeStack/Vpc/publicSubnet1
      VpcId:
        Ref: GameServerVPC
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicSubnetRouteTable
      SubnetId:
        Ref: PublicSubnet1
  PublicSubnetDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCIGW
      RouteTableId:
        Ref: PublicSubnetRouteTable
    DependsOn:
      - VPCGWATT
#  PublicSubnetEIP:
#    Type: AWS::EC2::EIP
#    Properties:
#      Domain: vpc
#      Tags:
#        - Key: Name
#          Value: CodeStack/Vpc/publicSubnet1
#  PublicSubnetNATGateway:
#    Type: AWS::EC2::NatGateway
#    Properties:
#      AllocationId:
#        Fn::GetAtt:
#          - PublicSubnetEIP
#          - AllocationId
#      SubnetId:
#        Ref: PublicSubnet1
#      Tags:
#        - Key: Name
#          Value: CodeStack/Vpc/publicSubnet1
#    DependsOn:
#      - PublicSubnetDefaultRoute
#      - PublicSubnetRouteTableAssociation
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: CodeStack/Vpc/PublicSubnet2
      VpcId:
        Ref: GameServerVPC
  PublicSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: CodeStack/Vpc/publicSubnet2
      VpcId:
        Ref: GameServerVPC
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicSubnet2RouteTable
      SubnetId:
        Ref: PublicSubnet2
  PublicSubnet2DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCIGW
      RouteTableId:
        Ref: PublicSubnet2RouteTable
    DependsOn:
      - VPCGWATT
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: CodeStack/Vpc/publicSubnet3
      VpcId:
        Ref: GameServerVPC
  PublicSubnet3RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: CodeStack/Vpc/publicSubnet3
      VpcId:
        Ref: GameServerVPC
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicSubnet3RouteTable
      SubnetId:
        Ref: PublicSubnet3
  PublicSubnet3DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCIGW
      RouteTableId:
        Ref: PublicSubnet3RouteTable
    DependsOn:
      - VPCGWATT
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: CodeStack/Vpc/privateSubnet1
      VpcId:
        Ref: GameServerVPC
  PrivateSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: CodeStack/Vpc/privateSubnet1
      VpcId:
        Ref: GameServerVPC
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateSubnet1RouteTable
      SubnetId:
        Ref: PrivateSubnet1
#  PrivateSubnet1DefaultRoute:
#    Type: AWS::EC2::Route
#    Properties:
#      DestinationCidrBlock: 0.0.0.0/0
#      NatGatewayId:
#        Ref: PublicSubnetNATGateway
#      RouteTableId:
#        Ref: PrivateSubnet1RouteTable
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: CodeStack/Vpc/privateSubnet2
      VpcId:
        Ref: GameServerVPC
  PrivateSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: CodeStack/Vpc/privateSubnet2
      VpcId:
        Ref: GameServerVPC
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateSubnet2RouteTable
      SubnetId:
        Ref: PrivateSubnet2
#  PrivateSubnet2DefaultRoute:
#    Type: AWS::EC2::Route
#    Properties:
#      DestinationCidrBlock: 0.0.0.0/0
#      NatGatewayId:
#        Ref: PublicSubnetNATGateway
#      RouteTableId:
#        Ref: PrivateSubnet2RouteTable
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: 10.0.5.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: CodeStack/Vpc/privateSubnet3
      VpcId:
        Ref: GameServerVPC
  PrivateSubnet3RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: CodeStack/Vpc/privateSubnet3
      VpcId:
        Ref: GameServerVPC
  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateSubnet3RouteTable
      SubnetId:
        Ref: PrivateSubnet3
#  PrivateSubnet3DefaultRoute:
#    Type: AWS::EC2::Route
#    Properties:
#      DestinationCidrBlock: 0.0.0.0/0
#      NatGatewayId:
#        Ref: PublicSubnetNATGateway
#      RouteTableId:
#        Ref: PrivateSubnet3RouteTable
  VPCIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - 'palworld-cdk-demo'
              - '-'
              - !Ref AWS::Region
  VPCGWATT:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: VPCIGW
      VpcId:
        Ref: GameServerVPC
  CustomVpcRestrictDefaultSGCustomResourceProviderRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: Inline
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:AuthorizeSecurityGroupEgress
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:RevokeSecurityGroupEgress
                Resource:
                  - Fn::Join:
                      - ''
                      - - 'arn:aws:ec2:'
                        - !Ref AWS::Region
                        - ':'
                        - 613477150601
                        - !Ref AWS::AccountId
                        - Fn::GetAtt:
                            - GameServerVPC
                            - DefaultSecurityGroup
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH (TCP port 22) in
      GroupName: palworld-cdk-demo-613477150601
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: '-1'
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow SSH Access
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          Description: Allow 8211 tcp Access
          FromPort: 8211
          IpProtocol: tcp
          ToPort: 8211
        - CidrIp: 0.0.0.0/0
          Description: Allow 8211 udp Access
          FromPort: 8211
          IpProtocol: udp
          ToPort: 8211
      VpcId:
        Ref: GameServerVPC
  GameServerEIP:
    Type: AWS::EC2::EIP
  GameServerKeyPair:
    Condition: createKeyPair
    Type: AWS::EC2::KeyPair
    Properties:
      KeyFormat: pem
      KeyName: !Join
        - ''
        - - 'pal-server-keypair'
          - '-'
          - !Ref AWS::Region
      KeyType: rsa
    DeletionPolicy: Retain
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - Fn::Join:
            - ''
            - - 'arn:'
              - Ref: AWS::Partition
              - ':iam::aws:policy/AmazonSSMManagedInstanceCore'
        - Fn::Join:
            - ''
            - - 'arn:'
              - Ref: AWS::Partition
              - ':iam::aws:policy/AmazonS3FullAccess'
      Tags:
        - Key: Name
          Value: palworld-game-server
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: InstanceRole
  GameServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      IamInstanceProfile:
        Ref: InstanceProfile
      ImageId: !Ref UbuntuAmi
      InstanceType: !Ref ServerSize
      KeyName: !Join
        - ''
        - - 'pal-server-keypair'
          - '-'
          - !Ref AWS::Region
      SecurityGroupIds:
        - Fn::GetAtt:
            - SecurityGroup
            - GroupId
      SubnetId:
        Ref: PublicSubnet1
      Tags:
        - Key: Name
          Value: !Ref ServerName
      UserData:
        Fn::Base64: '#!/bin/bash'
    DependsOn:
      - InstanceRole
  GameServerEIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId:
        Fn::GetAtt:
          - GameServerEIP
          - AllocationId
      InstanceId:
        Ref: GameServerInstance
  BootstrapDocument:
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: '2.2'
        description: Simple SSM Document
        mainSteps:
          - action: aws:runShellScript
            name: runShellScript
            inputs:
              runCommand:
                - echo "bootstrap started"
                - Fn::Join:
                    - ''
                    - - 'bucketName='
                      - Ref: BucketName
                      - '-'
                      - Ref: AWS::AccountId
                      - '-'
                      - Ref: AWS::Region
                - mkdir /opt/steam
                - mkdir /palworld-server

                - echo "[INFO] INSTALLING SOFTWARE"
                - sudo apt-get update
                - sudo apt-get install -y curl lib32gcc1 lsof git awscli
                - sudo apt install zip -y
                - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                - unzip awscliv2.zip
                - sudo ./aws/install

                - echo "[INFO] INIT S3 DIRECTORY FOR BACKUP"
                - instanceId=`wget -q -O - http://169.254.169.254/latest/meta-data/instance-id`
                - aws s3api put-object --bucket ${bucketName} --key ${instanceId}/ --content-length 0

                - echo "[INFO] DOWNLOADING AND INSTALLING STEAM CMD"
                - wget -P /opt/steam https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz
                - yes "" | sudo add-apt-repository multiverse
                - yes "" | sudo dpkg --add-architecture i386
                - sudo apt update
                - tar -xzf /opt/steam/steamcmd_linux.tar.gz -C /opt/steam
                - chmod 755 /opt/steam/steamcmd.sh

                - echo "[INFO] CREATING STEAM USER"
                - useradd -m -U steam
                - chown -R steam:steam /palworld-server

                - echo "[INFO] SETTING UP STEAMCMD INSTALLER TO DOWNLOAD PALWORLD"
                - sudo chown -R steam:steam /opt/steam
                - |-
                  echo "@NoPromptForPassword 1
                  force_install_dir /palworld-server
                  login anonymous
                  app_update 2394010 validate
                  quit" > /opt/steam/download-palworld.txt

                - echo "[INFO] DOWNLOADING PALWORLD"
                - sudo -u steam /opt/steam/steamcmd.sh +runscript /opt/steam/download-palworld.txt
                - sudo -u steam mkdir -p /home/steam/.steam/sdk64/
                - sudo -u steam /opt/steam/steamcmd.sh +login anonymous +app_update 1007
                  +quit
                - sleep 60
                - sudo -u steam cp "/home/steam/Steam/steamapps/common/Steamworks SDK
                  Redist/linux64/steamclient.so" /home/steam/.steam/sdk64/

                - echo "[INFO] CREATING SYSTEMD SERVICE PALWORLD"
                - |-
                  sudo echo "[Unit]
                  Description=Palworld Dedicated Server
                  After=network.target

                  [Service]
                  Type=simple
                  LimitNOFILE=10000
                  User=steam
                  Group=steam
                  ExecStartPre=/opt/steam/steamcmd.sh +runscript /opt/steam/download-palworld.txt
                  WorkingDirectory=/palworld-server
                  ExecStart=/palworld-server/PalServer.sh EpicApp=PalServer

                  Restart=on-failure
                  RestartSec=20s

                  [Install]
                  WantedBy=multi-user.target" > /etc/systemd/system/palworld.service
                - sudo mkdir -p /palworld-server/Pal/Saved/Config/LinuxServer/
                - |-
                  sudo echo "[/Script/Pal.PalGameWorldSettings]
                  OptionSettings=(Difficulty=${difficulty},DayTimeSpeedRate=${day_time_speed_rate},NightTimeSpeedRate=${night_time_speed_rate},ExpRate=${exp_rate},PalCaptureRate=${pal_capture_rate},PalSpawnNumRate=${pal_spawn_num_rate},PalDamageRateAttack=${pal_damage_rate_attack},PalDamageRateDefense=${pal_damage_rate_defense},PlayerDamageRateAttack=${player_damage_rate_attack},PlayerDamageRateDefense=${player_damage_rate_defense},PlayerStomachDecreaceRate=${player_stomach_decrease_rate},PlayerStaminaDecreaceRate=${player_stamina_decrease_rate},PlayerAutoHPRegeneRate=${player_auto_hp_regen_rate},PlayerAutoHpRegeneRateInSleep=${player_auto_hp_regen_rate_in_sleep},PalStomachDecreaceRate=${pal_stomach_decrease_rate},PalStaminaDecreaceRate=${pal_stamina_decrease_rate},PalAutoHPRegeneRate=${pal_auto_hp_regen_rate},PalAutoHpRegeneRateInSleep=${pal_auto_hp_regene_rate_in_sleep},BuildObjectDamageRate=${build_object_damage_rate},BuildObjectDeteriorationDamageRate=${build_object_deterioration_damage_rate},CollectionDropRate=${collection_drop_rate},CollectionObjectHpRate=${collection_object_hp_rate},CollectionObjectRespawnSpeedRate=${collection_object_respawn_speed_rate},EnemyDropItemRate=${enemy_drop_item_rate},DeathPenalty=${death_penalty},bEnablePlayerToPlayerDamage=${enable_player_to_player_damage},bEnableFriendlyFire=${enable_friendly_fire},bEnableInvaderEnemy=${enable_invader_enemy},bActiveUNKO=${active_unko},bEnableAimAssistPad=${enable_aim_assist_pad},bEnableAimAssistKeyboard=${enable_aim_assist_keyboard},DropItemMaxNum=${drop_item_max_num},DropItemMaxNum_UNKO=${drop_item_max_num_unko},BaseCampMaxNum=${base_camp_max_num},BaseCampWorkerMaxNum=${base_camp_worker_max_num},DropItemAliveMaxHours=${drop_item_alive_max_hours},bAutoResetGuildNoOnlinePlayers=${auto_reset_guild_no_online_players},AutoResetGuildTimeNoOnlinePlayers=${auto_reset_guild_time_no_online_players},GuildPlayerMaxNum=${guild_player_max_num},PalEggDefaultHatchingTime=${pal_egg_default_hatching_time},WorkSpeedRate=${work_speed_rate},bIsMultiplay=${is_multiplay},bIsPvP=${is_pvp},bCanPickupOtherGuildDeathPenaltyDrop=${can_pickup_other_guild_death_penalty_drop},bEnableNonLoginPenalty=${enable_non_login_penalty},bEnableFastTravel=${enable_fast_travel},bIsStartLocationSelectByMap=${is_start_location_select_by_map},bExistPlayerAfterLogout=${exist_player_after_logout},bEnableDefenseOtherGuildPlayer=${enable_defense_other_guild_player},CoopPlayerMaxNum=${coop_player_max_num},ServerPlayerMaxNum=${server_player_max_num},ServerName="${server_name}",ServerDescription="${server_description}",%{ if admin_password != "" ~}AdminPassword="${admin_password}",%{ else ~}AdminPassword="",%{ endif ~}%{ if server_password != "" ~}ServerPassword="${server_password}",%{ else ~}ServerPassword="",%{ endif ~}PublicPort=${public_port},%{ if public_ip != "" ~}PublicIP="${public_ip}",%{ else ~}PublicIP="",%{ endif ~}RCONEnabled=${enable_rcon},%{ if rcon_port != "" ~}RCONPort=${rcon_port},%{ else ~}RCONPort="",%{ endif ~}%{ if region != "" ~}Region="${region}",%{ else ~}Region="",%{ endif ~}bUseAuth=${use_auth},BanListURL="${ban_list_url}")" > /palworld-server/Pal/Saved/Config/LinuxServer/PalWorldSettings.ini
                - chown -R steam:steam /palworld-server/Pal/Saved
                - chmod -R 775 /palworld-server/Pal/Saved
                - systemctl daemon-reload
                - echo "[INFO] ENABLING PALWORLD.SERVICE"
                - systemctl enable palworld
                - echo "[INFO] STARTING PALWORLD.SERVICE"
                - systemctl start palworld
      DocumentType: Command
      Name: !Join
        - ''
        - - !Ref AWS::StackName
          - -dedicated-server-bootstrap-document-v0.1

  MySSMAssociation:
    Type: AWS::SSM::Association
    Properties:
      AssociationName: BootstrapAssociation
      Name: !Ref BootstrapDocument
      Targets:
        - Key: InstanceIds
          Values:
            - Ref: GameServerInstance
  DescribeImagesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DescribeImages
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: ec2:DescribeImages
                Effect: Allow
                Resource: '*'
  GetLatestAMI:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.11
      Handler: index.handler
      Role: !Sub ${DescribeImagesRole.Arn}
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import json
          import traceback

          def handler(event, context):
            try:
              response = boto3.client('ec2').describe_images(
                  Filters=[
                    {'Name': 'name', 'Values': [event['ResourceProperties']['Name']]}
                  ],
              )

              amis = sorted(response['Images'],
                            key=lambda x: x['CreationDate'],
                            reverse=True)
              id = amis[0]['ImageId']

              cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, id)
            except:
              traceback.print_last()
              cfnresponse.send(event, context, cfnresponse.FAIL, {}, "ok")
  UbuntuAmi:
    Type: Custom::FindAMI
    Properties:
      ServiceToken: !Sub ${GetLatestAMI.Arn}
      Name: 'ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-20240126'
  BackupFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonSSMFullAccess
  BackupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !Sub ${BackupFunctionRole.Arn}
      Timeout: 300
      Code:
        ZipFile: |
          import { SSMClient, CreateAssociationCommand } from '@aws-sdk/client-ssm';
          
          export const handler = async (event, context) => {    
            console.log(event)
            const documentName = event.documentName;
            const targets = [
             { Key: 'InstanceIds', Values: [event.instanceId] },
            ];
            const associationParams = {
              Targets: targets,
              AssociationName: 'bootstrap-' + event.instanceId,
              Name: documentName,
            };
            const ssmClient = new SSMClient();
          
            try{
              const createAssociationCommand = new CreateAssociationCommand(associationParams);
              const data = await ssmClient.send(createAssociationCommand);
              console.log('Association created successfully:', data);
          
              // Return a response if needed
              return {
                statusCode: 200,
                body: JSON.stringify({ message: 'Association created successfully' }),
        
              }
        
            } catch (error) {
              console.error('Error creating association:', error);
                
              // Return an error response
              return {
                statusCode: 500,
                body: JSON.stringify({ error: 'Error creating association' }),
              };
            } finally {
              // Close the SDK client to release resources
              ssmClient.destroy();
            }
          }
  BackupSchedulerRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Schedule a Lambda that creates backup every 30 minutes
      ScheduleExpression: cron(*/30 * * * ? *)
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - BackupFunction
              - Arn
          Id: Target0
          Input:
            Fn::Join:
              - ""
              - - '{"instanceId":"'
                - Ref: GameServerInstance
                - '","documentName":"backup-document"}'
  BackupFunctionAllowRuleTrigger:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - BackupFunction
          - Arn
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - BackupSchedulerRule
          - Arn
  BackupDocument:
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: "2.2"
        description: Backup Document
        mainSteps:
          - action: aws:runShellScript
            name: runShellScript
            inputs:
              runCommand:
                - cd /palworld-server/Pal/Saved/SaveGames
                - current_time=$(date +%s)
                - rounded_time=$((current_time / 1800 * 1800))
                - formatted_time=$(date -d "@$rounded_time" "+%Y-%m-%d %H:%M:%S %Z" -u)
                - sudo zip -r ${rounded_time}.zip ./
                - Fn::Join:
                    - ""
                    - - s3path=s3://
                      - Ref: BucketName
                      - '-'
                      - Ref: AWS::AccountId
                      - '-'
                      - Ref: AWS::Region
                      - /
                      - Ref: GameServerInstance
                - aws s3 cp ./${rounded_time}.zip ${s3path}/${rounded_time}.zip
      DocumentType: Command
      Name: backup-document
Parameters:
  BucketName:
    Type: String
    Default: 'game-server-cdk-demo'
    Description: default value will be transformed to 'game-server-cdk-demo-<account-id>-<region>', use this to set your own bucket name
  CreateBucket:
    Type: String
    Default: 'false'
    Description: default is 'false', use 'true' if you want to create bucket. Please Note! bucket deletion policy is retain. Therefore as long as it is created and not manually deleted, you do not need to create it again.
  CreateKeyPair:
    Type: String
    Default: 'false'
    Description: default is 'false', use 'true' if you want to create key pair. Please Note! bucket deletion policy is retain. Therefore as long as it is created and not manually deleted, you do not need to create it again.
  ServerName:
    Type: String
    Default: 'dedicated-game-server'
    Description: default is 'dedicated-game-server', use this to set your own server name
  ServerSize:
    Type: String
    Default: t3.xlarge
    Description: t3.large is recommended for up to 3 players. t3.xlarge is recommended for 4-8 players, t3.2xlarge is recommended for up to 20 players. Other options are for premium setup.
    AllowedValues:
      - t3.xlarge
      - t3.large
      - t3.2xlarge
      - r6i.large
      - r6i.xlarge
      - r6i.2xlarge
Conditions:
  createBucket: !Equals [!Ref CreateBucket, 'true']
  createKeyPair: !Equals [!Ref CreateKeyPair, 'true']
